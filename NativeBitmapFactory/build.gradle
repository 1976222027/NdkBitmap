plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    namespace = "tv.cjump.ndkbitmap"
    compileSdkVersion 32

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        //ndk编译
        ndk{
            abiFilters  "armeabi-v7a","arm64-v8a","x86_64", "x86"  //输出指定三种abi体系结构下的so库。
        }
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        jniLibs.srcDirs 'src/main/libs'
        jni.srcDirs = [] // 这会阻止自动生成 Android.mk
    }
//    ndkVersion '21.4.7075529'
    ndkVersion = "25.1.8937393"
    externalNativeBuild {
        externalNativeBuild {
            ndkBuild {
                // jni文件存放路径
                path 'src/main/jni/Android.mk'
            }
//            cmake {
//                path 'src/main/jni/CMakeLists.txt'
//            }
        }
    }
//加了这个就传上去了
    publishing {
        singleVariant("release") {
            //使用apg插件里的？会包含源码和文档
//            withSourcesJar()
//            withJavadocJar()
        }
    }
}


def GROUP_ID = 'com.mhy'
def ARTIFACT_ID = "ndkbitmap"//project.getName()
def VERSION_NAME = '0.0.1'
//artifactory私库直接执行这里
//afterEvaluate {
//    publishing {
//        publications {
//            release(MavenPublication) {
//                from components.release
//                //artifact androidSourcesJar //打包源码，去除这行打的包将看不到源码
//                groupId = GROUP_ID
//                artifactId = ARTIFACT_ID
//                version = VERSION_NAME
//            }
//        }
//        repositories {
//            maven {
//                allowInsecureProtocol true  // 如果MAVEN_LOCAL_PATH是http，此处必须为true，如果是https，则可以删除此项
//                name = "artifactory"  //"nexus" 配置后在Gradle > Tasks > publishing 下会显示对应的名称，容易区分
//                url = uri(MAVEN_URL)
//                credentials {
//                    username = MAVEN_USER
//                    password = MAVEN_PASSWORD
//                }
//            }
//        }
//    }
//}
//打包源码的task
task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    // 源码路径，包含Java、kotlin代码
    from android.sourceSets.main.java.srcDirs
    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}
//jitpack
afterEvaluate {
    publishing {
        publications {
            register(MavenPublication) {
                from components.release
                //这里头是artifacts的配置信息，不填会采用默认的
                groupId = GROUP_ID
                artifactId = ARTIFACT_ID
                version = VERSION_NAME
                // 增加上传源码的 task
                artifact androidSourcesJar
                // 必须有这个 否则不会上传AAR包  将bundleReleaseAar任务的单个输出文件作为发布的AAR文件。这样，该AAR文件就会成为 MavenPublication 的 artifact 并进行发布
            }
        }
    }
}
